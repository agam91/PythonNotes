Floor Division in python can be achieved by using //
	
	for example : 7//4 ... will give you 1

Powers  : 2**3 = 8
Sq Root : 4**.5 = 2

String formatting with place holder
	
	%s to inject strings into your print statements. The modulo % is referred to as a "string formatting operator".
	
	print("I'm going to inject %s here." %'something') : I'm going to inject something here.
	
	print("I'm going to inject %s text here, and %s text here." %('some','more')) : 
	I'm going to inject some text here, and more text here.

	x, y = 'some', 'more'
	print("I'm going to inject %s text here, and %s text here."%(x,y))
	
	I'm going to inject some text here, and more text here.

Two methods %s and %r convert any python object to a string using two separate methods: str() and repr(). 
%r and repr() deliver the string representation of the object, including quotation marks and any escape characters.
	
	print('He said his name was %r.' %'Fred') : He said his name was 'Fred'.
	
	print('I once caught a fish %r.' %'this \tbig') : I once caught a fish 'this \tbig'.

The %s operator converts whatever it sees into a string, including integers and floats. The %d operator converts numbers to integers first, without rounding
	
	print('I wrote %s programs today.' %3.75)
	print('I wrote %d programs today.' %3.75)   
	
	I wrote 3.75 programs today.
	I wrote 3 programs today.

Padding and Precision of Floating Point Numbers
	
	Floating point numbers use the format %5.2f. Here, 5 would be the minimum number of characters the string should contain; these may be padded with whitespace if the entire number does not have this many digits. Next to this, .2f stands for how many numbers to show past the decimal point
	
	print('Floating point numbers: %5.2f' %(13.144)) : 13.14
	
	print('Floating point numbers: %1.0f' %(13.144)) : 13
	
Multiple Formatting

	print('First: %s, Second: %5.2f, Third: %r' %('hi!',3.1415,'bye!'))
	
	First: hi!, Second:  3.14, Third: 'bye!'
	
By default, .format() aligns text to the left, numbers to the right. You can pass an optional <,^, or > to set a left, center or right alignment:

	print('{0:<8} | {1:^8} | {2:>8}'.format('Left','Center','Right'))
	print('{0:<8} | {1:^8} | {2:>8}'.format(11,22,33)

	Left     |  Center  |    Right
	11       |    22    |       33
	
f-strings
	print(f"He said his name is {name!r}").... Pass !r to get the string representation: : He said his name is 'Fred'

	num = 23.45
	print("My 10 character, four decimal number is:{0:10.4f}".format(num))
	print(f"My 10 character, four decimal number is:{num:{10}.{6}}")

	My 10 character, four decimal number is:   23.4500
	My 10 character, four decimal number is:     23.45
	
	Where with the .format() method you might see {value:10.4f}, with f-strings this can become {value:{10}.{6}}
	with f-strings, precision refers to the total number of digits, not just those following the decimal
	
	num = 23.45
	print("My 10 character, four decimal number is:{0:10.4f}".format(num))
	print(f"My 10 character, four decimal number is:{num:10.4f}")
	
	My 10 character, four decimal number is:   23.4500
	My 10 character, four decimal number is:   23.4500

	
